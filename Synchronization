Question 2:
Write a java program to implement synchronization, write clear java coding steps how to do synchronization with java thread objects.

Answer:
Steps on how to do synchronization with java thread objects.
Step 1: Define a shared resource class with synchronized methods.
Step 2: Create multiple threads that access the shared resource.
Step 3: Run the threads and observe synchronization in action.

// Step 1: Define a shared resource class with synchronized methods
class SharedResource {
    // Shared variable
    private int count = 0;

    // Synchronized method to increment count
    public synchronized void increment() {
        count++;
        System.out.println("Incremented: " + count);
    }

    // Synchronized method to decrement count
    public synchronized void decrement() {
        count--;
        System.out.println("Decremented: " + count);
    }
}

// Step 2: Create multiple threads that access the shared resource
class MyThread extends Thread {
    private SharedResource resource;

    public MyThread(SharedResource resource) {
        this.resource = resource;
    }

    @Override
    public void run() {
        // Access the shared resource
        resource.increment();
        resource.decrement();
    }
}

public class SynchronizationExample {
    public static void main(String[] args) {
        // Step 3: Run the threads and observe synchronization in action
        // Create a shared resource
        SharedResource resource = new SharedResource();

        // Create multiple threads
        MyThread thread1 = new MyThread(resource);
        MyThread thread2 = new MyThread(resource);

        // Start the threads
        thread1.start();
        thread2.start();
    }
}
```

Explanation:
1. We define a `SharedResource` class with synchronized methods `increment()` and `decrement()`. These methods ensure that only one thread can execute them at a time.
2. We create a `MyThread` class that extends `Thread` and takes a `SharedResource` object in its constructor. Each thread will operate on the same shared resource.
3. In the `run()` method of `MyThread`, we call the `increment()` and `decrement()` methods of the shared resource.
4. In the `main()` method, we create a `SharedResource` object and two `MyThread` objects.
5. We start both threads, and since the methods in the `SharedResource` class are synchronized, only one thread can execute them at a time, ensuring thread safety.
