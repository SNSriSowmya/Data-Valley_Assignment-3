Question 3:
What is abstraction in java, how many ways can we implement abstraction, write proper java program and how to implement abstraction.

Answer:
Abstraction in Java is the process of hiding the implementation details of a class and exposing only the necessary features or behaviors to the outside world. 
There are two main ways to implement abstraction in Java:

1.	Abstract Classes:
•	Abstract classes in Java are classes that cannot be instantiated directly. They are designed to be extended by subclasses, which then provide implementations for the abstract methods declared in the abstract class. 
•	Abstract classes can contain both abstract methods (methods without a body) and concrete methods (methods with a body). 
•	To create an abstract class, you use the `abstract` keyword.

2. Interfaces:
•	An interface in Java is a reference type, similar to a class, that defines a contract of methods that a class implementing the interface must adhere to. It contains method signatures without any implementations, providing a way to achieve full abstraction in Java programming.
•	Interfaces provide a way to achieve full abstraction as they only declare methods and do not provide any implementation.
•	Classes can implement one or multiple interfaces, providing implementations for the methods declared in those interfaces.
•	To implement an interface, you use the `implements` keyword.

Example:

USING INTERFACES:
// Interface
interface Animal {
    void makeSound();
}

// Concrete classes implementing the interface
class Dog implements Animal {
    @Override
    public void makeSound() {
        System.out.println("Woof!");
    }
}

class Cat implements Animal {
    @Override
    public void makeSound() {
        System.out.println("Meow!");
    }
}

public class AbstractionExample {
    public static void main(String[] args) {
        // Creating objects using interfaces
        Animal dog = new Dog();
        Animal cat = new Cat();

        // Calling method makeSound()
        dog.makeSound(); // Output: Woof!
        cat.makeSound(); // Output: Meow!
    }
}


USING ABSTRACT CLASSES:
// Abstract class
abstract class Animal {
    // Abstract method
    public abstract void makeSound();
}

// Concrete classes extending the abstract class
class Dog extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Woof!");
    }
}

class Cat extends Animal {
    @Override
    public void makeSound() {
        System.out.println("Meow!");
    }
}

public class AbstractionExample {
    public static void main(String[] args) {
        // Creating objects using abstract class
        Animal dog = new Dog();
        Animal cat = new Cat();

        // Calling method makeSound()
        dog.makeSound(); // Output: Woof!
        cat.makeSound(); // Output: Meow!
    }
}
